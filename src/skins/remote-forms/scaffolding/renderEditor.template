<%  if (property.type == Boolean || property.type == boolean)
        out << renderBooleanEditor(domainClass, property)
    else if (property.type && Number.isAssignableFrom(property.type) || (property.type?.isPrimitive() &&
            property.type != boolean))
        out << renderNumberEditor(domainClass, property)
    else if (property.type == String)
        out << renderStringEditor(domainClass, property)
    else if (property.type == Date || property.type == java.sql.Date || property.type == java.sql.Time ||
            property.type == Calendar)
        out << renderDateEditor(domainClass, property)
    else if (property.type == URL)
        out << renderStringEditor(domainClass, property)
    else if (property.type && property.isEnum())
        out << renderEnumEditor(domainClass, property)
    else if (property.type == TimeZone)
        out << renderSelectTypeEditor("timeZone", domainClass, property)
    else if (property.type == Locale)
        out << renderSelectTypeEditor("locale", domainClass, property)
    else if (property.type == Currency)
        out << renderSelectTypeEditor("currency", domainClass, property)
    else if (property.type==([] as Byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.type==([] as byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.manyToOne || property.oneToOne)
        out << renderManyToOne(domainClass, property)
    else if ((property.oneToMany && !property.bidirectional) ||
            (property.manyToMany && property.isOwningSide()))
        out << renderManyToMany(domainClass, property)
    else if (property.oneToMany)
        out << renderOneToMany(domainClass, property)

    private renderEnumEditor(domainClass, property) {
		final def sb = new StringBuilder("")
		
        sb << '<skin-loader:remoteSelect' id="' << property.name << '" name="' << property.name << '" '
        sb << 'paramName="' << property.name << '" action="validate" update="' << property.name << 'Flash" '
        sb << 'from="${' << property.type.name << '.values()}" '
        sb << 'keys="${' << property.type.name << '.values()*.name()}" '
        if (isRequired()) sb << 'required="" '
        sb << 'value="${' << "${domainInstance}?.${property.name}?.name()" << '}" '
        sb << renderNoSelection(property)
        sb << '/>'
        
        sb as String
    }

    private renderStringEditor(domainClass, property) {
        final def sb = new StringBuilder("")
        
        if (!cp) {
            sb << '<skin-loader:remoteTextField id="' << property.name << '" name="' << property.name << '" '
            sb << 'paramName="' << property.name << '" action="validate" update="' << property.name << 'Flash" '
            sb << 'value="${' << "${domainInstance}?.${property.name}" << '}" />'
            
        } else if ("textarea" == cp.widget || (cp.maxSize > 250 && !cp.password && !cp.inList)) {
            sb << '<skin-loader:remoteTextArea id="' << property.name << '" name="' << property.name << '" '
            sb << 'paramName="' << property.name << '" action="validate" update="' << property.name << 'Flash" '
			sb << 'cols="40" rows="5" '
			if (cp.maxSize) sb << 'maxlength="' << cp.maxSize << '" '
			if (isRequired()) sb << 'required="" '
			sb << 'value="${' << "${domainInstance}?.${property.name}" << '}" />'
			
        } else if (cp.inList) {
			sb << '<skin-loader:remoteSelect id="' << property.name << '" name="' << property.name << '" '
            sb << 'from="${' << "${domainInstance}.constraints.${property.name}.inList" << '}" '
            sb << 'paramName="' << property.name << '" action="validate" update="' << property.name << 'Flash" '
			if (isRequired()) sb << 'required="" '
			sb << 'value="${' << "${domainInstance}?.${property.name}" << '}" '
			sb << 'valueMessagePrefix="' << "${domainClass.propertyName}.${property.name}" << '" '
			sb << renderNoSelection(property)
			sb << '/>'
			
		} else {
            sb << '<skin-loader:remoteTextField id="' << property.name << '" name="' << property.name << '" '
            sb << 'paramName="' << property.name << '" action="validate" update="' << property.name << 'Flash" '
            if (cp.password) sb << 'type="password" '
            if (cp.url) sb << 'type="url" '
            if (cp.email) sb << 'type="email" '
			if (cp.maxSize) sb << 'maxlength="' << cp.maxSize << '" '
			if (!cp.editable) sb << 'readonly="readonly" '
			if (cp.matches) sb << 'pattern="${' << "${domainInstance}.constraints.${property.name}.matches" << '}" '
			if (isRequired()) sb << 'required="" '
			sb << 'value="${' << "${domainInstance}?.${property.name}" << '}" />'
		}
        
        sb as String
    }

    //return "<input type=\"file\" id=\"${property.name}\" name=\"${property.name}\" />"
    private renderByteArrayEditor(domainClass, property) {    
        final def sb = new StringBuilder()
        
        sb << '<uploader:uploader id="' << property.name << '" name="' << property.name << '"'
        //sb << ' url="\${[controller: \'' << property.referencedDomainClass.propertyName << '\', action: \'yourAction\']}"'
        sb << '>\n'
        
        sb << "<uploader:onProgress>\n"
        sb << "    \$('" << property.name << "Flash').update('"
        //sb << "Upload progress: \' \+ fileName \+ \'%"
        sb << message(code: 'skinloader.upload.progress', default: 'Uploading...', args: [total])
        sb << "')\n"
        sb << "</uploader:onProgress>\n"
        sb << "<uploader:onComplete>\n"
        sb << "    \$('" << property.name << "Flash').update('"
        //sb << "File upload complete: \' \+ fileName"
        sb << message(code: 'skinloader.upload.complete', default: 'File upload complete', args: [fileName])
        sb << "')\n"
        sb << "</uploader:onComplete>\n"
        sb << "<uploader:onCancel>\n"
        sb << "    \$('" << property.name << "Flash').update('"
        //sb << "File upload cancelled!"
        sb << message(code: 'skinloader.upload.cancelled', default: 'File upload cancelled!')
        sb << "')\n"
        sb << "</uploader:onCancel>\n"
        
        sb << '</uploader:uploader>'

        sb as String
    }

    private renderManyToOne(domainClass, property) {
        if (property.association) {
			final def sb = new StringBuilder()
			
            sb << '<skin-loader:remoteSelect' id="' << property.name << '" name="' << property.name << '" '
            sb << 'paramName="' << property.name << '" action="validate" update="' << property.name << 'Flash" '
 			sb << 'from="${' << property.type.name << '.list()}" ' << 'optionKey="id" '
			if (isRequired()) sb << 'required="" '
 			sb << 'value="${' << "${domainInstance}?.${property.name}" << '?.id}" '
 			sb << renderNoSelection(property)
 			sb << '/>'
 			
			sb as String
        }
    }

    private renderManyToMany(domainClass, property) {
		final def sb = new StringBuilder()
		
        sb << '<skin-loader:remoteSelect' id="' << property.name << '" name="' << property.name << '" '
        sb << 'paramName="' << property.name << '" action="validate" update="' << property.name << 'Flash" '
 		sb << 'from="${' << property.referencedDomainClass.fullName << '.list()}" '
 		sb << 'multiple="multiple" optionKey="id" size="5" '
		if (isRequired()) sb << 'required="" '
 		sb << 'value="${' << "${domainInstance}?.${property.name}" << '*.id}" '
 		sb << '/>'
		
		sb as String
    }

    private renderOneToMany(domainClass, property) {
        final def sw = new StringWriter()
        final def pw = new PrintWriter(sw)
        
        pw.println()
        pw.println '<ul>'
        pw.println "<g:each in=\"\${${domainInstance}?.${property.name}?}\" var=\"${property.name[0]}\">"
        pw.println "    <li><g:link controller=\"${property.referencedDomainClass.propertyName}\" action=\"show\" id=\"\${${property.name[0]}.id}\">\${${property.name[0]}?.encodeAsHTML()}</g:link></li>"
        pw.println '</g:each>'
		pw.println '<li class="add">'
        pw.println "    <g:link controller=\"${property.referencedDomainClass.propertyName}\" action=\"create\" params=\"['${domainClass.propertyName}.id': ${domainInstance}?.id]\">\${message(code: 'default.add.label', args: [message(code: '${property.referencedDomainClass.propertyName}.label', default: '${property.referencedDomainClass.shortName}')])}</g:link>"
		pw.println '</li>'
        pw.println '</ul>'
        
        return sw.toString()
    }

    private renderNumberEditor(domainClass, property) {
        final def sb = new StringBuilder()
        if (!cp) {
            if (property.type == Byte) {
                sb << '<skin-loader:remoteSelect' id="' << property.name << '" name="' << property.name << '" '
                sb << 'paramName="' << property.name << '" action="validate" update="' << property.name << 'Flash" '
                sb << 'from="${-128..127}" '
                if (isRequired()) sb << 'required="" '
                sb << 'value="${' << "${domainInstance}?.${property.name}" << '}" '
                sb << '/>'
                
            } else {
                sb << '<skin-loader:remoteTextField id="' << property.name << '" name="' << property.name << '" '
                sb << 'paramName="' << property.name << '" action="validate" update="' << property.name << 'Flash" '
                sb << 'type="number" value="${' << "${domainInstance}?.${property.name}" << '}" />'
            }
        } else {
            if (cp.range) {
                sb << '<skin-loader:remoteSelect' id="' << property.name << '" name="' << property.name << '" '
                sb << 'paramName="' << property.name << '" action="validate" update="' << property.name << 'Flash" '
                sb << 'from="${' << "${cp.range.from}..${cp.range.to}" << '}" '
                if (isRequired()) sb << 'required="" '
                sb << 'value="${' << "${domainInstance}?.${property.name}" << '}" '
                sb << renderNoSelection(property)
                sb << '/>'
				
            } else if (cp.inList) {
                sb << '<skin-loader:remoteSelect' id="' << property.name << '" name="' << property.name << '" '
                sb << 'paramName="' << property.name << '" action="validate" update="' << property.name << 'Flash" '
                sb << 'from="${' << "${domainInstance}.constraints.${property.name}.inList" << '}" '
                if (isRequired()) sb << 'required="" '
                sb << 'value="${' << "${domainInstance}?.${property.name}" << '}" '
                sb << 'valueMessagePrefix="' << "${domainClass.propertyName}.${property.name}" << '" '
                sb << renderNoSelection(property)
                sb << '/>'
				
            } else {
				sb << '<skin-loader:remoteTextField id="' << property.name << '" name="' << property.name << '" '
                sb << 'paramName="' << property.name << '" action="validate" update="' << property.name << 'Flash" '
                if (cp.min != null) sb << 'min="' << cp.min << '" '
                if (cp.max != null) sb << 'max="' << cp.max << '" '
                if (isRequired()) sb << 'required="" '
                sb << 'type="number" value="${' << "${domainInstance}?.${property.name}" << '}" />'
            }
        }
        
        sb as String
     }

    private renderBooleanEditor(domainClass, property) {
        final def sb = new StringBuilder()
        
        sb << '<skin-loader:remoteCheckBox' id="' << property.name << '" name="' << property.name << '" '    
        if (cp) {
            if (cp.widget) sb << 'widget="${cp.widget}" '
            cp.attributes.each { key, value ->
                sb << '${key}="${value}" '
            }
        }
        sb << 'value="${' << "${domainInstance}?.${property.name}" << '}" />'
        
        sb as String
    }

    private renderDateEditor(domainClass, property) {
        final def precision = (property.type == Date || property.type == java.sql.Date ||
            property.type == Calendar) ? "day" : "minute"
            
        // CONTINUE...
        if (!cp) {
            return "<g:datePicker name=\"${property.name}\" precision=\"${precision}\" value=\"\${${domainInstance}?.${property.name}}\" />"
        } else {
            if (!cp.editable) {
                return "\${${domainInstance}?.${property.name}?.toString()}"
            } else {
                def sb = new StringBuilder("<g:datePicker name=\"${property.name}\" ")
                if (cp.format) sb << "format=\"${cp.format}\" "
                if (cp.widget) sb << "widget=\"${cp.widget}\" "
                cp.attributes.each { k, v ->
                    sb << "${k}=\"${v}\" "
                }
                if (!cp.attributes.precision){
                    sb << "precision=\"${precision}\" "
                }
                sb << " value=\"\${${domainInstance}?.${property.name}}\" ${renderNoSelection(property)} />"

                return sb.toString()
            }
        }
    }

    private renderSelectTypeEditor(type, domainClass,property) {
        final def sb = new StringBuilder("")
        sb << '<g:remote${type?.capitalize()}Select id="' << property.name << '" name="${property.name}" '
        
        if (!cp) {
            return "<g:${type}Select name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" />"
        } else {
            def sb = new StringBuilder("<g:${type}Select name=\"${property.name}\" ")
            if (cp.widget) sb << "widget=\"${cp.widget}\" ";
            cp.attributes.each { k, v ->
                sb << "${k}=\"${v}\" "
            }
            sb << "value=\"\${${domainInstance}?.${property.name}}\" ${renderNoSelection(property)} />"
        }
        
        sb as String
    }

    private renderNoSelection(property) {
        if (isOptional()) {
            if (property.manyToOne || property.oneToOne) {
                return " noSelection=\"['null': '']\""
            } else if (property.type == Date || property.type == java.sql.Date ||
                    property.type == java.sql.Time || property.type == Calendar) {
                return " default=\"none\" noSelection=\"['': '']\""
            } else {
                return " noSelection=\"['': '']\""
            }
        }
        
        return ""
    }

	private boolean isRequired() {
		!isOptional()
	}

	private boolean isOptional() {
	    if (!cp) {
	        return false
	    } else {
	        cp.nullable || (cp.propertyType == String && cp.blank) || cp.propertyType in [boolean, Boolean]
	    }
	}
%>